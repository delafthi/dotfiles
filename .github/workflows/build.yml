name: Build System Configurations

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NIXPKGS_BRANCH: nixpkgs-unstable

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has-relevant-changes: ${{ steps.filter.outputs.has-relevant-changes }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 0 || 2 }}
      - name: Check for relevant changes
        id: filter
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            files=$(git diff --name-only "${{ github.event.pull_request.base.sha }}..HEAD")
          else
            files=$(git diff --name-only HEAD^ HEAD 2>/dev/null || git diff --name-only --diff-filter=A HEAD)
          fi

          if echo "$files" | grep -qE '\.(nix|lock)$|\.github/workflows/build\.yml'; then
            echo "has-relevant-changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "has-relevant-changes=false" >> "$GITHUB_OUTPUT"
          fi

  prepare-matrix:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31

      - name: Create matrix
        id: create-matrix
        run: |
          matrix_json=$(jq -n '[]')

          nixos_hosts=$(nix eval --json '.#nixosConfigurations' --apply 'x: builtins.attrNames x' 2>/dev/null || echo '[]')
          for host in $(echo "$nixos_hosts" | jq -r '.[]'); do
            system=$(nix eval --raw ".#nixosConfigurations.$host.config.nixpkgs.system" 2>/dev/null || echo "")
            case "$system" in
              aarch64-linux)
                runner="ubuntu-24.04-arm"
                ;;
              x86_64-linux)
                runner="ubuntu-latest"
                ;;
              *)
                echo "::warning::Skipping unsupported system: $system for $host"
                continue
                ;;
            esac
            matrix_json=$(echo "$matrix_json" | jq --arg host "$host" --arg system "$system" --arg runner "$runner" --arg config "nixosConfigurations" \
              '. += [{"hostname": $host, "system": $system, "runner": $runner, "config": $config}]')
          done

          darwin_hosts=$(nix eval --json '.#darwinConfigurations' --apply 'x: builtins.attrNames x' 2>/dev/null || echo '[]')
          for host in $(echo "$darwin_hosts" | jq -r '.[]'); do
            system=$(nix eval --raw ".#darwinConfigurations.$host.config.nixpkgs.system" 2>/dev/null || echo "")
            case "$system" in
              aarch64-darwin)
                runner="macos-latest"
                ;;
              x86_64-darwin)
                runner="macos-14"
                ;;
              *)
                echo "::warning::Skipping unsupported system: $system for $host"
                continue
                ;;
            esac
            matrix_json=$(echo "$matrix_json" | jq --arg host "$host" --arg system "$system" --arg runner "$runner" --arg config "darwinConfigurations" \
              '. += [{"hostname": $host, "system": $system, "runner": $runner, "config": $config}]')
          done

          echo "matrix=$(echo "$matrix_json" | jq -c .)" >> "$GITHUB_OUTPUT"

          total=$(echo "$matrix_json" | jq 'length')
          echo "::notice::Detected $total system configuration(s)"

  build:
    needs: [check-changes, prepare-matrix]
    if: needs.check-changes.outputs.has-relevant-changes == 'true'
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        include: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    name: "${{ matrix.hostname }} [${{ matrix.system }}]"
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            # Sandbox is disabled on MacOS by default.
            sandbox = true
          nix_path: nixpkgs=channel:${{ env.NIXPKGS_BRANCH }}

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v13

      - name: Build System
        run: |
          echo "::notice::Building configuration for ${{ matrix.hostname }}..."
          nix build --print-build-logs .#${{ matrix.config }}.${{ matrix.hostname }}.config.system.build.toplevel

  all-builds-pass:
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    steps:
      - name: Check build status
        run: |
          result="${{ needs.build.result }}"
          if [[ "$result" == "success" || "$result" == "skipped" ]]; then
            echo "::notice::Builds passed or skipped (no relevant changes)"
            exit 0
          else
            echo "::error::Build job failed or was cancelled"
            exit 1
          fi
