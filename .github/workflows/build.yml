name: Build System Configurations

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NIXPKGS_BRANCH: nixpkgs-unstable

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has-relevant-changes: ${{ steps.filter.outputs.has-relevant-changes }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 0 || 2 }}
      - name: Check for relevant changes
        id: filter
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            files=$(git diff --name-only "${{ github.event.pull_request.base.sha }}..HEAD")
          else
            files=$(git diff --name-only HEAD^ HEAD 2>/dev/null || git diff --name-only --diff-filter=A HEAD)
          fi

          if echo "$files" | grep -qE '\.(nix|lock)$|\.github/workflows/build\.yml'; then
            echo "has-relevant-changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "has-relevant-changes=false" >> "$GITHUB_OUTPUT"
          fi

  build:
    needs: check-changes
    if: needs.check-changes.outputs.has-relevant-changes == 'true'
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        include:
          - runner: ubuntu-24.04-arm
            hostnames: Thierrys-MacBook-Air-VM
            system: aarch64-linux
          - runner: macos-latest
            hostnames: Thierrys-MacBook-Air
            system: aarch64-darwin
    name: "${{ matrix.system }} [${{ matrix.hostnames }}]"
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            # Sandbox is disabled on MacOS by default.
            sandbox = true
          nix_path: nixpkgs=channel:${{ env.NIXPKGS_BRANCH }}

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v13

      - name: Build System
        run: |
          for hostname in ${{ matrix.hostnames }}; do
            echo "::notice::Building configuration for $hostname..."
            config_prefix=$([[ "${{ contains(matrix.system, 'linux') }}" == "true" ]] && echo nixosConfigurations || echo darwinConfigurations)
            nix build --print-build-logs .#"$config_prefix"."$hostname".config.system.build.toplevel
          done

  all-builds-pass:
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    steps:
      - name: Check build status
        run: |
          result="${{ needs.build.result }}"
          if [[ "$result" == "success" || "$result" == "skipped" ]]; then
            echo "::notice::Builds passed or skipped (no relevant changes)"
            exit 0
          else
            echo "::error::Build job failed or was cancelled"
            exit 1
          fi
