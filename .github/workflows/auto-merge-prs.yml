name: Auto Merge PR

on:
  # Trigger when PR labels are added/removed
  pull_request:
    types: [labeled, unlabeled]

  # Trigger when PR status checks are updated
  pull_request_target:
    types: [labeled, unlabeled]

  # Allow manual triggering for specific PRs
  workflow_dispatch:
    inputs:
      pr_number:
        description: PR number to merge
        required: true
        type: string
      merge_method:
        description: Merge method
        required: false
        default: rebase
        type: choice
        options:
          - rebase
          - squash
          - merge

jobs:
  auto-merge:
    name: Auto Merge PR
    runs-on: ubuntu-latest

    steps:
      - name: Get PR Information (for label trigger)
        if: github.event_name != 'workflow_dispatch'
        id: pr-info-label
        run: |
          {
            echo "pr_number=${{ github.event.pull_request.number }}"
            echo "pr_labels=${{ toJson(github.event.pull_request.labels.*.name) }}"
            echo "pr_state=${{ github.event.pull_request.state }}"
            echo "pr_mergeable=${{ github.event.pull_request.mergeable }}"
            echo "pr_draft=${{ github.event.pull_request.draft }}"
          } >> "$GITHUB_OUTPUT"

      - name: Get PR Information (for manual trigger)
        if: github.event_name == 'workflow_dispatch'
        id: pr-info-manual
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.pr_number }}
            });

            const labels = pr.labels.map(label => label.name);

            core.setOutput('pr_number', pr.number);
            core.setOutput('pr_labels', JSON.stringify(labels));
            core.setOutput('pr_state', pr.state);
            core.setOutput('pr_mergeable', pr.mergeable);
            core.setOutput('pr_draft', pr.draft);
            core.setOutput('pr_title', pr.title);

      - name: Set PR variables
        id: pr-vars
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            {
              echo "pr_number=${{ steps.pr-info-manual.outputs.pr_number }}"
              echo "pr_labels=${{ steps.pr-info-manual.outputs.pr_labels }}"
              echo "pr_state=${{ steps.pr-info-manual.outputs.pr_state }}"
              echo "pr_mergeable=${{ steps.pr-info-manual.outputs.pr_mergeable }}"
              echo "pr_draft=${{ steps.pr-info-manual.outputs.pr_draft }}"
              echo "merge_method=${{ github.event.inputs.merge_method || 'rebase' }}"
            } >> "$GITHUB_OUTPUT"
          else
            {
              echo "pr_number=${{ steps.pr-info-label.outputs.pr_number }}"
              echo "pr_labels=${{ steps.pr-info-label.outputs.pr_labels }}"
              echo "pr_state=${{ steps.pr-info-label.outputs.pr_state }}"
              echo "pr_mergeable=${{ steps.pr-info-label.outputs.pr_mergeable }}"
              echo "pr_draft=${{ steps.pr-info-label.outputs.pr_draft }}"
              echo "merge_method=rebase"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Check if PR should be auto-merged
        id: should-merge
        run: |
          labels='${{ steps.pr-vars.outputs.pr_labels }}'
          has_auto_merge_label=$(echo $labels | jq -r 'if . then map(select(. == "auto-merge")) | length > 0 else false end')

          echo "has_auto_merge_label=$has_auto_merge_label" >> "$GITHUB_OUTPUT"

          # For manual trigger, we'll merge regardless of label if explicitly requested
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_merge=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_merge=$has_auto_merge_label" >> "$GITHUB_OUTPUT"
          fi

      - name: Validate rebase compatibility
        if: steps.should-merge.outputs.should_merge == 'true' && steps.pr-vars.outputs.merge_method == 'rebase'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ steps.pr-vars.outputs.pr_number }};

            console.log('🔍 Validating rebase compatibility...');

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });

            // Check if the PR branch is ahead of base branch
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: pr.base.sha,
              head: pr.head.sha
            });

            console.log(`📊 Commits ahead: ${comparison.ahead_by}`);
            console.log(`📊 Commits behind: ${comparison.behind_by}`);
            console.log(`📊 Total commits in PR: ${comparison.commits.length}`);

            if (comparison.ahead_by === 0) {
              core.setFailed('❌ PR has no commits to rebase. Nothing to merge.');
              return;
            }

            // For rebase, we want to ensure the branch can be rebased cleanly
            if (pr.mergeable === false) {
              core.setFailed('❌ PR has conflicts and cannot be rebased. Please resolve conflicts first.');
              return;
            }

            console.log('✅ PR appears compatible with rebase strategy');

      - name: Wait for status checks
        if: steps.should-merge.outputs.should_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ steps.pr-vars.outputs.pr_number }};

            // Wait for status checks to complete
            const maxAttempts = 30; // 15 minutes max
            const delayMs = 30000; // 30 seconds

            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              console.log(`🔄 Attempt ${attempt}/${maxAttempts}: Checking PR status...`);

              // Get the latest PR information
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });

              if (pr.mergeable === false) {
                core.setFailed(`❌ PR #${pr_number} has conflicts and cannot be rebased.`);
                return;
              }

              if (pr.mergeable === null) {
                console.log('⏳ Mergeable status is still being calculated...');
                await new Promise(resolve => setTimeout(resolve, delayMs));
                continue;
              }

              // Check status checks
              const { data: statusChecks } = await github.rest.repos.getCombinedStatusForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });

              // Check check runs (GitHub Actions, etc.)
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });

              const statusState = statusChecks.state;
              const pendingChecks = checkRuns.check_runs.filter(check =>
                check.status === 'in_progress' || check.status === 'queued'
              );
              const failedChecks = checkRuns.check_runs.filter(check =>
                check.conclusion === 'failure' || check.conclusion === 'cancelled'
              );

              console.log(`📈 Status: ${statusState}, Pending: ${pendingChecks.length}, Failed: ${failedChecks.length}`);

              if (failedChecks.length > 0) {
                const failedNames = failedChecks.map(check => check.name).join(', ');
                core.setFailed(`❌ PR #${pr_number} has failed status checks: ${failedNames}`);
                return;
              }

              if (statusState === 'success' && pendingChecks.length === 0) {
                console.log('✅ All status checks passed! Ready to rebase and merge.');
                return;
              }

              if (attempt < maxAttempts) {
                console.log(`⏰ Waiting ${delayMs/1000} seconds before next check...`);
                await new Promise(resolve => setTimeout(resolve, delayMs));
              }
            }

            core.setFailed(`⏰ Timeout waiting for status checks to complete for PR #${pr_number}`);

      - name: Rebase and Merge PR
        if: steps.should-merge.outputs.should_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ steps.pr-vars.outputs.pr_number }};
            const merge_method = '${{ steps.pr-vars.outputs.merge_method }}';

            try {
              console.log(`🚀 Attempting to ${merge_method} PR #${pr_number}...`);

              // Get PR details for better commit message
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });

              const commitTitle = merge_method === 'rebase'
                ? `Auto-rebase PR #${pr_number}: ${pr.title}`
                : `Auto-${merge_method} PR #${pr_number}: ${pr.title}`;

              const commitMessage = merge_method === 'rebase'
                ? `Automatically rebased and merged PR #${pr_number} via GitHub Actions.\n\n${pr.body || ''}`
                : `Automatically merged via GitHub Actions using ${merge_method} method.\n\n${pr.body || ''}`;
              const { data: result } = await github.rest.pulls.merge({

                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                merge_method: merge_method,
                commit_title: commitTitle,
                commit_message: commitMessage
              });

              if (result.merged) {
                const methodEmoji = merge_method === 'rebase' ? '🔄' : merge_method === 'squash' ? '📦' : '🔀';
                console.log(`${methodEmoji} Successfully ${merge_method}d PR #${pr_number}`);
                console.log(`📝 Merge SHA: ${result.sha}`);
                console.log(`📋 Method used: ${merge_method.toUpperCase()}`);

                // Add comment to PR about the rebase
                if (merge_method === 'rebase') {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr_number,
                    body: `🤖 **Auto-merged via rebase**\n\nThis PR was automatically rebased and merged while preserving the individual commit history.\n\n📝 **Merge SHA:** ${result.sha}\n🔄 **Method:** Rebase and merge`
                  });
                }
              } else {
                core.setFailed(`❌ Failed to ${merge_method} PR #${pr_number}: ${result.message}`);
              }
            } catch (error) {
              console.error(`❌ Error during ${merge_method} of PR #${pr_number}:`, error);

              // Provide more specific error messages for rebase failures
              if (merge_method === 'rebase' && error.message.includes('conflict')) {
                core.setFailed(`❌ Rebase failed due to conflicts in PR #${pr_number}. Please rebase manually and resolve conflicts.`);
              } else if (merge_method === 'rebase' && error.message.includes('not possible')) {
                core.setFailed(`❌ Rebase not possible for PR #${pr_number}. The branch may need to be updated or conflicts resolved.`);
              } else {
                core.setFailed(`❌ Error ${merge_method}ing PR #${pr_number}: ${error.message}`);
              }
            }

      - name: Log workflow result
        run: |
          echo "=== Auto-Merge Workflow Summary ==="
          echo "🔢 PR Number: ${{ steps.pr-vars.outputs.pr_number }}"
          echo "⚡ Trigger: ${{ github.event_name }}"
          echo "🎯 Should Merge: ${{ steps.should-merge.outputs.should_merge }}"
          echo "🏷️  Has auto-merge label: ${{ steps.should-merge.outputs.has_auto_merge_label }}"
          echo "📋 PR Labels: ${{ steps.pr-vars.outputs.pr_labels }}"
          echo "🔄 Merge Method: ${{ steps.pr-vars.outputs.merge_method }}"
          echo "================================="
